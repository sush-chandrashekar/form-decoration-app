<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_snc_formdec.formDec</name>
        <script><![CDATA[angular.module('formDec', [])
.factory('fdFieldService', function (lazyLoader, $injector, $document) {
	'use strict';
	
	var head = $document[0].head || $document[0].getElementsByTagName('head')[0];
	
	function addElement(options) {
        var el = $document[0].createElement('style');
        el.type = 'text/css';
        if (options.id)
            el.setAttribute('id', options.id);
        if (options.directive)
            el.setAttribute('df-directive', options.directive);
        if (el.styleSheet)
            el.styleSheet.cssText = options.css;
        else
            el.appendChild($document[0].createTextNode(options.css));
        return el;
    }
	
	function loadCSS(directiveName, options) {
        var id = options.id + '-s';
		if (options.css && !$document.find('head #' + directiveName).length)
			head.appendChild(addElement({ css: options.css, id: id, directive: directiveName }));
    }
	
	function loadDirective (directiveName, options) {
		
		lazyLoader.directive(directiveName, function($injector) {

			var api = {
				restrict: 'E',
				replace: false
			};
			
			if (options.template)
				api.template = options.template;
			
			if (options.css)
				loadCSS(directiveName, options);
			
			if (options.controller) {
				eval('api.controller=' + options.controller);
			}
			
			api.link = function(scope, elem, attr, ctrl) {
                var link;
                if (options.link) {
                    eval('link=' + options.link);
                    if (link) {
                        link(scope, elem, attr, ctrl);
                    }
                }
            };
		
			return api;
		});
	}
	
	return {
		loadDirective: loadDirective
	};
	
	
})
.directive('fdFormField', function ($compile, fdFieldService) {
	'use strict';
	
	var link = function (scope, elem, attrs, ctrl) {
		
		var directiveName = scope.formModel._fields[scope.field.name].directive.name;
		var directiveOptions = scope.formModel._directives[directiveName];
		
		fdFieldService.loadDirective(directiveName, directiveOptions);
		
		var spinalCase = scope.formModel._fields[scope.field.name].directive.spinal_case;
		
		var el = angular.element("<" + spinalCase + ' class="df_' + directiveName + '"></' + spinalCase + ">");
		elem.find('.fd-form-field').append(el);
		$compile(el)(scope);
	};
	
	var template = '<div class="fd-form-field"></div>';
	
	var controller = function ($scope, $element) {
		
		var field = $scope.field;

		$scope.showEdit = false;
		$scope.hasError = true;
		$scope.hasChanged = false;

		$scope.clearError = function () {
			$scope.hasError = false;
		};

		extendField($scope.field);

		if (!field)
			throw "fdFormField used without providing a field.";

		function extendField(field) {
			var glideField = glideFormFieldFactory.create(field);
			field.isReadonly = glideField.isReadonly;
			field.stagedValue = field.value;

			$scope.getGlideForm().$private.events.on("change", function(fieldName, oldValue, newValue) {
				if (fieldName === field.name)
					field.stagedValue = newValue;
			});

			field.isMandatory = function() {
				return !glideField.isReadonly() && glideField.isMandatory();
			};
			field.mandatory_filled = function() {
				return glideFormFieldFactory.hasValue(field, field.stagedValue);
			};
		}

		$scope.stagedValueChange = function() {
			$scope.$emit('sp.spFormField.stagedValueChange', null);
		};

		$scope.fieldValue = function(newValue, displayValue) {
			
			$scope.hasChanged = true;
			if (!field.readonly && angular.isDefined(newValue)) {
				$scope.getGlideForm().setValue(field.name, newValue, displayValue);
			}
			
			return field.value;
		};
		
	};
	
	return {
		restrict: 'E',
		template: template,
		link: link,
		scope: {
            field: '=',
            formModel: '=',
            getGlideForm: '&glideForm'
        },
		controller: controller,
		require: ['^spModel']
	};
});]]></script>
        <script_name>formDec</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>dylan.lindgren</sys_created_by>
        <sys_created_on>2017-07-23 04:53:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>037af2b64f4443003b3028201310c7f6</sys_id>
        <sys_mod_count>97</sys_mod_count>
        <sys_name>x_snc_formdec.formDec</sys_name>
        <sys_package display_value="Form Decoration" source="x_snc_formdec">0e3afa364f4443003b3028201310c742</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Form Decoration">0e3afa364f4443003b3028201310c742</sys_scope>
        <sys_update_name>sys_ui_script_037af2b64f4443003b3028201310c7f6</sys_update_name>
        <sys_updated_by>dylan.lindgren@snc</sys_updated_by>
        <sys_updated_on>2017-09-06 01:27:42</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
